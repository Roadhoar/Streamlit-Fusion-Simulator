name: Generate UN-EX Comparison Graph

on:
  workflow_dispatch: # Allows manual triggering from GitHub Actions tab

jobs:
  build:
    runs-on: ubuntu-latest # You can choose other runners like windows-latest or macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Checks out your repository code

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # Or your preferred Python version (e.g., '3.10', '3.11')

    - name: Install matplotlib dependency
      run: |
        python -m pip install --upgrade pip
        pip install matplotlib # Only matplotlib is needed, as the script is embedded

    - name: Run graph generation script (Embedded)
      # The Python script is now directly embedded here.
      # This completely bypasses any issues with file path resolution for generate_comparison_graph.py.
      run: |
        python -c "
import matplotlib.pyplot as plt
import numpy as np

# --- Data from your two scenarios ---
# Scenario 1: 'Tokamak Baseline' (UN-EX Tuner set to reflect conventional challenges)
baseline_data = {
    'UN-EX D': 5.810,
    'tau_E (s)': 1.725,
    'Q Estimate': 1.73
}

# Scenario 2: 'UN-EX Tuned Optimal' (UN-EX Tuner actively optimized)
tuned_data = {
    'UN-EX D': 4.010,
    'tau_E (s)': 2.499,
    'Q Estimate': 2.50
}

# --- Prepare data for plotting ---
metrics = list(baseline_data.keys())
baseline_values = [baseline_data[m] for m in metrics]
tuned_values = [tuned_data[m] for m in metrics]

x = np.arange(len(metrics)) # the label locations
width = 0.35  # the width of the bars

# --- Create the plot ---
fig, ax = plt.subplots(figsize=(10, 6)) # Adjust figure size for better readability

# Plot bars for Baseline scenario
rects1 = ax.bar(x - width/2, baseline_values, width, label='Conventional Baseline (Simulated)', color='#FFA07A') # Light Salmon
# Plot bars for Tuned scenario
rects2 = ax.bar(x + width/2, tuned_values, width, label='UN-EX Tuned Optimal', color='#20B2AA') # Light Sea Green

# --- Customize the plot ---
ax.set_ylabel('Value')
ax.set_title('UN-EX Fusion Tuner: Performance Comparison (Baseline vs. Tuned)')
ax.set_xticks(x)
ax.set_xticklabels(metrics)
ax.legend()
ax.grid(axis='y', linestyle='--', alpha=0.7)

# Add value labels on top of the bars
def autolabel(rects):
    """Attach a text label above each bar in *rects*, displaying its height."""
    for rect in rects:
        height = rect.get_height()
        ax.annotate(f'{height:.2f}',
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords='offset points',
                    ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)

fig.tight_layout() # Adjust layout to prevent labels from overlapping

# --- Save the plot to a file ---
output_filename = 'unex_performance_comparison.png'
plt.savefig(output_filename, dpi=300, bbox_inches='tight') # Save with high resolution
print(f'Graph saved as {output_filename}')
        "
    - name: Upload generated graph
      uses: actions/upload-artifact@v4 # Uploads the generated image as a workflow artifact
      with:
        name: unex-comparison-graph
        path: unex_performance_comparison.png # The name of the file your script saves
